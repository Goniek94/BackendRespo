const mongoose = require('mongoose');

// Schemat powiadomienia
const notificationSchema = new mongoose.Schema({
  userId: { type: mongoose.Schema.Types.ObjectId, required: true },
  type: { type: String, required: true },
  title: { type: String, required: true },
  content: { type: String, required: true },
  isRead: { type: Boolean, default: false },
  link: { type: String },
  metadata: { type: Object, default: {} },
  createdAt: { type: Date, default: Date.now },
  updatedAt: { type: Date, default: Date.now }
});

async function createTestNotifications() {
  try {
    console.log('üîó ≈ÅƒÖczenie z bazƒÖ danych...');
    await mongoose.connect('mongodb://localhost:27017/marketplace', {
      useNewUrlParser: true,
      useUnifiedTopology: true
    });

    const Notification = mongoose.model('Notification', notificationSchema);
    const User = mongoose.model('User', new mongoose.Schema({}, { strict: false }));

    // Znajd≈∫ pierwszego u≈ºytkownika
    const user = await User.findOne({});
    if (!user) {
      console.log('‚ùå Nie znaleziono u≈ºytkownika w bazie danych');
      return;
    }

    console.log(`üë§ Znaleziono u≈ºytkownika: ${user.email || user.username || user._id}`);

    // Usu≈Ñ stare testowe powiadomienia
    await Notification.deleteMany({ 
      userId: user._id,
      title: { $regex: /^TEST/ }
    });

    // Stw√≥rz testowe powiadomienia
    const testNotifications = [
      {
        userId: user._id,
        type: 'new_message',
        title: 'TEST: Nowa wiadomo≈õƒá',
        content: 'Otrzyma≈Çe≈õ nowƒÖ wiadomo≈õƒá od u≈ºytkownika TestUser',
        isRead: false,
        link: '/profil/messages',
        metadata: { senderId: 'test123' }
      },
      {
        userId: user._id,
        type: 'new_message',
        title: 'TEST: Kolejna wiadomo≈õƒá',
        content: 'Otrzyma≈Çe≈õ kolejnƒÖ wiadomo≈õƒá',
        isRead: false,
        link: '/profil/messages',
        metadata: { senderId: 'test456' }
      },
      {
        userId: user._id,
        type: 'listing_approved',
        title: 'TEST: Og≈Çoszenie zatwierdzone',
        content: 'Twoje og≈Çoszenie zosta≈Ço zatwierdzone',
        isRead: false,
        link: '/profil/listings',
        metadata: { listingId: 'test789' }
      },
      {
        userId: user._id,
        type: 'system_notification',
        title: 'TEST: Powiadomienie systemowe',
        content: 'Wa≈ºna informacja systemowa',
        isRead: false,
        link: '/profil/notifications',
        metadata: {}
      },
      {
        userId: user._id,
        type: 'new_message',
        title: 'TEST: Przeczytana wiadomo≈õƒá',
        content: 'Ta wiadomo≈õƒá jest ju≈º przeczytana',
        isRead: true,
        link: '/profil/messages',
        metadata: { senderId: 'test999' }
      }
    ];

    console.log('üìù Tworzenie testowych powiadomie≈Ñ...');
    const createdNotifications = await Notification.insertMany(testNotifications);
    
    console.log(`‚úÖ Utworzono ${createdNotifications.length} testowych powiadomie≈Ñ`);

    // Sprawd≈∫ statystyki
    const totalNotifications = await Notification.countDocuments({ userId: user._id });
    const unreadNotifications = await Notification.countDocuments({ userId: user._id, isRead: false });
    const unreadMessages = await Notification.countDocuments({ 
      userId: user._id, 
      isRead: false, 
      type: 'new_message' 
    });
    const unreadOther = await Notification.countDocuments({ 
      userId: user._id, 
      isRead: false, 
      type: { $ne: 'new_message' } 
    });

    console.log('\nüìä Statystyki powiadomie≈Ñ:');
    console.log(`   - Wszystkie powiadomienia: ${totalNotifications}`);
    console.log(`   - Nieprzeczytane og√≥≈Çem: ${unreadNotifications}`);
    console.log(`   - Nieprzeczytane wiadomo≈õci: ${unreadMessages}`);
    console.log(`   - Nieprzeczytane inne: ${unreadOther}`);

    console.log('\nüéØ Oczekiwane liczniki w interfejsie:');
    console.log(`   - Wiadomo≈õci: ${unreadMessages}`);
    console.log(`   - Powiadomienia: ${unreadOther}`);

    await mongoose.disconnect();
    console.log('\n‚úÖ Zako≈Ñczono pomy≈õlnie');

  } catch (error) {
    console.error('‚ùå B≈ÇƒÖd:', error.message);
    await mongoose.disconnect();
  }
}

// Uruchom skrypt
createTestNotifications();
