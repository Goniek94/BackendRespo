import fetch from 'node-fetch';
import mongoose from 'mongoose';
import dotenv from 'dotenv';
import Message from './models/communication/message.js';
import User from './models/user/user.js';

// Za≈Çaduj zmienne ≈õrodowiskowe
dotenv.config();

const API_BASE = 'http://localhost:5000/api';
const TEST_EMAIL = 'mateusz.goszczycki1994@gmail.com';
const TEST_PASSWORD = 'Neluchu321.';

async function debugMessagesIssue() {
  try {
    console.log('üîç DEBUGOWANIE PROBLEMU Z WIADOMO≈öCIAMI');
    console.log('=====================================\n');

    // 1. Zaloguj siƒô i pobierz token
    console.log('üîê Logowanie u≈ºytkownika...');
    const loginResponse = await fetch(`${API_BASE}/users/login`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        email: TEST_EMAIL,
        password: TEST_PASSWORD
      })
    });

    if (!loginResponse.ok) {
      console.error('‚ùå B≈ÇƒÖd logowania:', loginResponse.status);
      return;
    }

    const loginData = await loginResponse.json();
    const userId = loginData.user?.id;
    console.log('‚úÖ Zalogowano. User ID:', userId);

    // Pobierz token z cookies
    const cookies = loginResponse.headers.get('set-cookie');
    let authToken = null;
    if (cookies) {
      const tokenMatch = cookies.match(/token=([^;]+)/);
      if (tokenMatch) {
        authToken = tokenMatch[1];
      }
    }

    if (!authToken && loginData.token) {
      authToken = loginData.token;
    }

    if (!authToken) {
      console.error('‚ùå Nie uda≈Ço siƒô pobraƒá tokenu');
      return;
    }

    console.log('‚úÖ Token pobrany\n');

    // 2. Sprawd≈∫ bezpo≈õrednio w bazie danych
    console.log('üóÑÔ∏è SPRAWDZANIE BAZY DANYCH');
    console.log('==========================');
    
    // Po≈ÇƒÖcz z bazƒÖ danych
    await mongoose.connect(process.env.MONGODB_URI);
    console.log('‚úÖ Po≈ÇƒÖczono z bazƒÖ danych');

    // Znajd≈∫ u≈ºytkownika
    const user = await User.findById(userId);
    if (!user) {
      console.error('‚ùå Nie znaleziono u≈ºytkownika w bazie');
      return;
    }
    console.log(`‚úÖ U≈ºytkownik: ${user.name || user.email} (${user._id})`);

    // Sprawd≈∫ wszystkie wiadomo≈õci zwiƒÖzane z tym u≈ºytkownikiem
    console.log('\nüìß ANALIZA WIADOMO≈öCI W BAZIE');
    console.log('==============================');

    const allMessages = await Message.find({
      $or: [
        { sender: userId },
        { recipient: userId }
      ]
    })
    .populate('sender', 'name email')
    .populate('recipient', 'name email')
    .sort({ createdAt: -1 });

    console.log(`Znaleziono ${allMessages.length} wiadomo≈õci zwiƒÖzanych z u≈ºytkownikiem\n`);

    allMessages.forEach((msg, index) => {
      console.log(`--- Wiadomo≈õƒá ${index + 1} ---`);
      console.log(`ID: ${msg._id}`);
      console.log(`Nadawca: ${msg.sender?.name || msg.sender?.email || msg.sender} (${msg.sender?._id || msg.sender})`);
      console.log(`Odbiorca: ${msg.recipient?.name || msg.recipient?.email || msg.recipient} (${msg.recipient?._id || msg.recipient})`);
      console.log(`Temat: ${msg.subject}`);
      console.log(`Tre≈õƒá: ${msg.content.substring(0, 50)}...`);
      console.log(`Data: ${msg.createdAt}`);
      console.log(`Przeczytana: ${msg.read}`);
      console.log(`Szkic: ${msg.draft}`);
      console.log(`Usuniƒôta przez: ${msg.deletedBy || 'nikt'}`);
      console.log(`Zarchiwizowana: ${msg.archived}`);
      
      // Sprawd≈∫ czy to wiadomo≈õƒá przychodzaca czy wychodzƒÖca
      const isIncoming = msg.recipient?._id?.toString() === userId || msg.recipient?.toString() === userId;
      const isOutgoing = msg.sender?._id?.toString() === userId || msg.sender?.toString() === userId;
      
      console.log(`Typ: ${isIncoming ? 'PRZYCHODZƒÑCA' : ''} ${isOutgoing ? 'WYCHODZƒÑCA' : ''}`);
      console.log('');
    });

    // 3. Sprawd≈∫ zapytania dla inbox
    console.log('üì• TESTOWANIE ZAPYTANIA INBOX');
    console.log('=============================');

    const userObjectId = new mongoose.Types.ObjectId(userId);
    
    const inboxQuery = { 
      recipient: userObjectId,
      deletedBy: { $ne: userObjectId }
    };
    
    console.log('Zapytanie inbox:', JSON.stringify(inboxQuery));
    
    const inboxMessages = await Message.find(inboxQuery)
      .populate('sender', 'name email')
      .populate('recipient', 'name email')
      .sort({ createdAt: -1 });
    
    console.log(`Wynik zapytania inbox: ${inboxMessages.length} wiadomo≈õci`);
    
    if (inboxMessages.length > 0) {
      console.log('Przyk≈Çadowa wiadomo≈õƒá inbox:');
      const msg = inboxMessages[0];
      console.log(`- Od: ${msg.sender?.name || msg.sender?.email}`);
      console.log(`- Temat: ${msg.subject}`);
      console.log(`- Data: ${msg.createdAt}`);
    }

    // 4. Sprawd≈∫ zapytanie dla sent
    console.log('\nüì§ TESTOWANIE ZAPYTANIA SENT');
    console.log('============================');

    const sentQuery = { 
      sender: userObjectId,
      draft: false, 
      deletedBy: { $ne: userObjectId }
    };
    
    console.log('Zapytanie sent:', JSON.stringify(sentQuery));
    
    const sentMessages = await Message.find(sentQuery)
      .populate('sender', 'name email')
      .populate('recipient', 'name email')
      .sort({ createdAt: -1 });
    
    console.log(`Wynik zapytania sent: ${sentMessages.length} wiadomo≈õci`);

    // 5. Test API endpoints
    console.log('\nüåê TESTOWANIE API ENDPOINTS');
    console.log('===========================');

    // Test inbox endpoint
    const inboxResponse = await fetch(`${API_BASE}/messages/inbox`, {
      headers: {
        'Authorization': `Bearer ${authToken}`,
        'Cookie': cookies || ''
      }
    });

    console.log(`Inbox API status: ${inboxResponse.status}`);
    if (inboxResponse.ok) {
      const inboxData = await inboxResponse.json();
      console.log(`Inbox API wynik: ${inboxData.length} wiadomo≈õci`);
    } else {
      const errorText = await inboxResponse.text();
      console.log(`Inbox API b≈ÇƒÖd: ${errorText}`);
    }

    // Test sent endpoint
    const sentResponse = await fetch(`${API_BASE}/messages/sent`, {
      headers: {
        'Authorization': `Bearer ${authToken}`,
        'Cookie': cookies || ''
      }
    });

    console.log(`Sent API status: ${sentResponse.status}`);
    if (sentResponse.ok) {
      const sentData = await sentResponse.json();
      console.log(`Sent API wynik: ${sentData.length} wiadomo≈õci`);
    }

    // 6. Test unread count
    console.log('\nüîî TESTOWANIE UNREAD COUNT');
    console.log('==========================');

    const unreadQuery = { 
      recipient: userObjectId,
      read: false,
      deletedBy: { $ne: userObjectId }
    };
    
    console.log('Zapytanie unread:', JSON.stringify(unreadQuery));
    
    const unreadCount = await Message.countDocuments(unreadQuery);
    console.log(`Liczba nieprzeczytanych w bazie: ${unreadCount}`);

    const unreadResponse = await fetch(`${API_BASE}/messages/unread-count`, {
      headers: {
        'Authorization': `Bearer ${authToken}`,
        'Cookie': cookies || ''
      }
    });

    console.log(`Unread API status: ${unreadResponse.status}`);
    if (unreadResponse.ok) {
      const unreadData = await unreadResponse.json();
      console.log(`Unread API wynik:`, unreadData);
    }

    console.log('\n‚úÖ DEBUGOWANIE ZAKO≈ÉCZONE');

  } catch (error) {
    console.error('üí• B≈ÇƒÖd podczas debugowania:', error);
  } finally {
    if (mongoose.connection.readyState === 1) {
      await mongoose.disconnect();
    }
  }
}

// Uruchom debugowanie
debugMessagesIssue();
