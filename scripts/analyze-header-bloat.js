/**
 * ANALIZA PRZYCZYN DU≈ªYCH NAG≈Å√ìWK√ìW HTTP 431
 * Szczeg√≥≈Çowa analiza wszystkich sk≈Çadnik√≥w nag≈Ç√≥wk√≥w ≈ºƒÖda≈Ñ
 */

import jwt from 'jsonwebtoken';
import fs from 'fs';

console.log('üîç ANALIZA PRZYCZYN DU≈ªYCH NAG≈Å√ìWK√ìW HTTP 431');
console.log('================================================================================\n');

/**
 * Analiza rozmiaru nag≈Ç√≥wk√≥w z przyk≈Çadowego ≈ºƒÖdania
 */
function analyzeHeaderSize() {
  console.log('üìä ANALIZA SK≈ÅADNIK√ìW NAG≈Å√ìWK√ìW');
  console.log('============================================================');
  
  // Przyk≈Çadowe nag≈Ç√≥wki z rzeczywistego ≈ºƒÖdania (na podstawie screenshota)
  const sampleHeaders = {
    'Accept': 'application/json, text/plain, */*',
    'Accept-Encoding': 'gzip, deflate, br, zstd',
    'Accept-Language': 'pl-PL,pl;q=0.9,en;q=0.8',
    'Connection': 'keep-alive',
    'Content-Type': 'application/json',
    'Cookie': 'token=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiI2NmRmMGZhMjMxMjI3MGQwYmI3ZDZhMSIsInJvbGUiOiJ1c2VyIiwiaWF0IjoxNzI1NzQ4NzY4LCJleHAiOjE3MjU3NTIzNjh9.abc123; refreshToken=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiI2NmRmMGZhMjMxMjI3MGQwYmI3ZDZhMSIsInJvbGUiOiJ1c2VyIiwiaWF0IjoxNzI1NzQ4NzY4LCJleHAiOjE3MjY5NTgzNjh9.def456; admin_token=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiI2NmRmMGZhMjMxMjI3MGQwYmI3ZDZhMSIsInJvbGUiOiJhZG1pbiIsImlhdCI6MTcyNTc0ODc2OCwiZXhwIjoxNzI1NzUyMzY4fQ.ghi789; admin_refreshToken=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiI2NmRmMGZhMjMxMjI3MGQwYmI3ZDZhMSIsInJvbGUiOiJhZG1pbiIsImlhdCI6MTcyNTc0ODc2OCwiZXhwIjoxNzI2OTU4MzY4fQ.jkl012; sessionId=sess_1234567890abcdef1234567890abcdef; csrfToken=csrf_abcdef1234567890abcdef1234567890; _ga=GA1.1.123456789.1234567890; _gid=GA1.1.987654321.0987654321; _fbp=fb.1.1234567890123.1234567890; analytics_session=analytics_1234567890abcdef1234567890abcdef',
    'Host': 'localhost:3000',
    'Referer': 'http://localhost:3000/admin/dashboard',
    'Sec-Ch-Ua': '"Google Chrome";v="119", "Chromium";v="119", "Not?A_Brand";v="24"',
    'Sec-Ch-Ua-Mobile': '?0',
    'Sec-Ch-Ua-Platform': '"Windows"',
    'Sec-Fetch-Dest': 'empty',
    'Sec-Fetch-Mode': 'cors',
    'Sec-Fetch-Site': 'same-origin',
    'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/119.0.0.0 Safari/537.36'
  };
  
  let totalSize = 0;
  const headerAnalysis = [];
  
  // Analiza ka≈ºdego nag≈Ç√≥wka
  Object.entries(sampleHeaders).forEach(([name, value]) => {
    const headerLine = `${name}: ${value}`;
    const size = Buffer.byteLength(headerLine, 'utf8');
    totalSize += size + 2; // +2 dla \r\n
    
    headerAnalysis.push({
      name,
      value: value.length > 100 ? value.substring(0, 100) + '...' : value,
      size,
      percentage: 0 // Bƒôdzie obliczone p√≥≈∫niej
    });
  });
  
  // Oblicz procenty
  headerAnalysis.forEach(header => {
    header.percentage = ((header.size / totalSize) * 100).toFixed(1);
  });
  
  // Sortuj wed≈Çug rozmiaru
  headerAnalysis.sort((a, b) => b.size - a.size);
  
  console.log(`üìè Ca≈Çkowity rozmiar nag≈Ç√≥wk√≥w: ${totalSize} bajt√≥w`);
  console.log(`üö® Status: ${totalSize > 8192 ? '‚ùå PRZEKRACZA 8KB' : totalSize > 4096 ? '‚ö†Ô∏è  DU≈ªY' : '‚úÖ OK'}`);
  console.log('');
  
  console.log('üîù TOP 10 NAJWIƒòKSZYCH NAG≈Å√ìWK√ìW:');
  headerAnalysis.slice(0, 10).forEach((header, index) => {
    const icon = header.size > 500 ? 'üî¥' : header.size > 200 ? 'üü°' : 'üü¢';
    console.log(`   ${index + 1}. ${icon} ${header.name}: ${header.size}B (${header.percentage}%)`);
    if (header.name === 'Cookie') {
      console.log(`      Warto≈õƒá: ${header.value}`);
    }
  });
  
  return { totalSize, headerAnalysis };
}

/**
 * Szczeg√≥≈Çowa analiza cookies
 */
function analyzeCookies() {
  console.log('\nüç™ SZCZEG√ì≈ÅOWA ANALIZA COOKIES');
  console.log('============================================================');
  
  // Przyk≈Çadowy cookie string z rzeczywistego ≈ºƒÖdania
  const cookieString = 'token=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiI2NmRmMGZhMjMxMjI3MGQwYmI3ZDZhMSIsInJvbGUiOiJ1c2VyIiwiaWF0IjoxNzI1NzQ4NzY4LCJleHAiOjE3MjU3NTIzNjh9.abc123; refreshToken=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiI2NmRmMGZhMjMxMjI3MGQwYmI3ZDZhMSIsInJvbGUiOiJ1c2VyIiwiaWF0IjoxNzI1NzQ4NzY4LCJleHAiOjE3MjY5NTgzNjh9.def456; admin_token=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiI2NmRmMGZhMjMxMjI3MGQwYmI3ZDZhMSIsInJvbGUiOiJhZG1pbiIsImlhdCI6MTcyNTc0ODc2OCwiZXhwIjoxNzI1NzUyMzY4fQ.ghi789; admin_refreshToken=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiI2NmRmMGZhMjMxMjI3MGQwYmI3ZDZhMSIsInJvbGUiOiJhZG1pbiIsImlhdCI6MTcyNTc0ODc2OCwiZXhwIjoxNzI2OTU4MzY4fQ.jkl012; sessionId=sess_1234567890abcdef1234567890abcdef; csrfToken=csrf_abcdef1234567890abcdef1234567890; _ga=GA1.1.123456789.1234567890; _gid=GA1.1.987654321.0987654321; _fbp=fb.1.1234567890123.1234567890; analytics_session=analytics_1234567890abcdef1234567890abcdef';
  
  const cookies = cookieString.split('; ').map(cookie => {
    const [name, value] = cookie.split('=');
    return { name, value, size: Buffer.byteLength(cookie, 'utf8') };
  });
  
  const totalCookieSize = Buffer.byteLength(cookieString, 'utf8');
  
  console.log(`üìè Ca≈Çkowity rozmiar cookies: ${totalCookieSize} bajt√≥w`);
  console.log(`üö® Status: ${totalCookieSize > 4096 ? '‚ùå BARDZO DU≈ªY' : totalCookieSize > 2048 ? '‚ö†Ô∏è  DU≈ªY' : '‚úÖ OK'}`);
  console.log('');
  
  // Sortuj cookies wed≈Çug rozmiaru
  cookies.sort((a, b) => b.size - a.size);
  
  console.log('üîù COOKIES WED≈ÅUG ROZMIARU:');
  cookies.forEach((cookie, index) => {
    const percentage = ((cookie.size / totalCookieSize) * 100).toFixed(1);
    const icon = cookie.size > 150 ? 'üî¥' : cookie.size > 50 ? 'üü°' : 'üü¢';
    const type = cookie.name.includes('token') ? '[JWT]' : 
                 cookie.name.startsWith('_') ? '[Analytics]' : '[Session]';
    
    console.log(`   ${index + 1}. ${icon} ${cookie.name} ${type}: ${cookie.size}B (${percentage}%)`);
    
    // Analiza token√≥w JWT
    if (cookie.name.includes('token') && cookie.value.includes('.')) {
      try {
        const parts = cookie.value.split('.');
        if (parts.length === 3) {
          const header = JSON.parse(Buffer.from(parts[0], 'base64').toString());
          const payload = JSON.parse(Buffer.from(parts[1], 'base64').toString());
          
          console.log(`      üìã Header: ${JSON.stringify(header)}`);
          console.log(`      üìã Payload: ${JSON.stringify(payload)}`);
          console.log(`      üìè Rozmiary: Header=${parts[0].length}B, Payload=${parts[1].length}B, Signature=${parts[2].length}B`);
        }
      } catch (error) {
        console.log(`      ‚ùå Nie mo≈ºna zdekodowaƒá JWT: ${error.message}`);
      }
    }
  });
  
  return { totalCookieSize, cookies };
}

/**
 * Analiza limit√≥w serwer√≥w
 */
function analyzeServerLimits() {
  console.log('\nüñ•Ô∏è  ANALIZA LIMIT√ìW SERWER√ìW');
  console.log('============================================================');
  
  const limits = [
    { server: 'Apache (domy≈õlny)', limit: 8192, description: 'LimitRequestFieldSize' },
    { server: 'Nginx (domy≈õlny)', limit: 4096, description: 'large_client_header_buffers' },
    { server: 'IIS (domy≈õlny)', limit: 16384, description: 'maxRequestLength' },
    { server: 'Node.js Express', limit: 8192, description: 'Domy≈õlny limit nag≈Ç√≥wk√≥w' },
    { server: 'Cloudflare', limit: 8192, description: 'Limit proxy' },
    { server: 'AWS ALB', limit: 16384, description: 'Application Load Balancer' }
  ];
  
  console.log('üìä TYPOWE LIMITY SERWER√ìW:');
  limits.forEach(({ server, limit, description }) => {
    console.log(`   ‚Ä¢ ${server}: ${limit}B (${(limit/1024).toFixed(1)}KB) - ${description}`);
  });
  
  return limits;
}

/**
 * Rekomendacje optymalizacji
 */
function generateOptimizationRecommendations(headerAnalysis, cookies, totalSize) {
  console.log('\nüí° REKOMENDACJE OPTYMALIZACJI');
  console.log('============================================================');
  
  const recommendations = [];
  
  // Analiza token√≥w JWT
  const jwtCookies = cookies.filter(c => c.name.includes('token'));
  if (jwtCookies.length > 0) {
    const jwtSize = jwtCookies.reduce((sum, c) => sum + c.size, 0);
    recommendations.push({
      priority: 'WYSOKI',
      category: 'JWT Tokens',
      issue: `${jwtCookies.length} token√≥w JWT zajmuje ${jwtSize}B (${((jwtSize/totalSize)*100).toFixed(1)}%)`,
      solutions: [
        'Skr√≥ƒá payload JWT - usu≈Ñ niepotrzebne pola',
        'U≈ºyj kr√≥tszych nazw p√≥l (userId -> u, role -> r)',
        'Zmniejsz czas ≈ºycia token√≥w (kr√≥tsze exp)',
        'Rozwa≈º u≈ºycie session storage zamiast cookies dla niekt√≥rych token√≥w'
      ]
    });
  }
  
  // Analiza cookies analitycznych
  const analyticsCookies = cookies.filter(c => c.name.startsWith('_'));
  if (analyticsCookies.length > 0) {
    const analyticsSize = analyticsCookies.reduce((sum, c) => sum + c.size, 0);
    recommendations.push({
      priority: '≈öREDNI',
      category: 'Analytics Cookies',
      issue: `${analyticsCookies.length} cookies analitycznych zajmuje ${analyticsSize}B`,
      solutions: [
        'Przenie≈õ analytics do localStorage',
        'U≈ºyj server-side analytics',
        'Ogranicz liczbƒô cookies analitycznych',
        'Skr√≥ƒá identyfikatory sesji'
      ]
    });
  }
  
  // Analiza duplikat√≥w
  const duplicateTokens = cookies.filter(c => c.name.includes('admin_'));
  if (duplicateTokens.length > 0) {
    recommendations.push({
      priority: 'WYSOKI',
      category: 'Duplicate Tokens',
      issue: `Wykryto ${duplicateTokens.length} dodatkowych token√≥w admin`,
      solutions: [
        'Usu≈Ñ duplikaty token√≥w (admin_token, admin_refreshToken)',
        'U≈ºyj jednego tokena z rolƒÖ w payload',
        'Implementuj role-based access control w jednym tokenie'
      ]
    });
  }
  
  // Og√≥lne rekomendacje
  if (totalSize > 8192) {
    recommendations.push({
      priority: 'KRYTYCZNY',
      category: 'Header Size',
      issue: `Ca≈Çkowity rozmiar nag≈Ç√≥wk√≥w: ${totalSize}B przekracza limit 8KB`,
      solutions: [
        'NATYCHMIASTOWE: Zwiƒôksz limit serwera do 16KB',
        'D≈ÅUGOTERMINOWE: Zredukuj rozmiar cookies o 50%',
        'Przenie≈õ czƒô≈õƒá danych do localStorage',
        'Implementuj cookie cleanup middleware'
      ]
    });
  }
  
  // Wy≈õwietl rekomendacje
  recommendations.forEach((rec, index) => {
    const priorityIcon = rec.priority === 'KRYTYCZNY' ? 'üö®' : 
                        rec.priority === 'WYSOKI' ? 'üî¥' : 
                        rec.priority === '≈öREDNI' ? 'üü°' : 'üü¢';
    
    console.log(`\n${index + 1}. ${priorityIcon} ${rec.category} [${rec.priority}]`);
    console.log(`   Problem: ${rec.issue}`);
    console.log(`   RozwiƒÖzania:`);
    rec.solutions.forEach(solution => {
      console.log(`     ‚Ä¢ ${solution}`);
    });
  });
  
  return recommendations;
}

/**
 * Generowanie raportu
 */
function generateReport(analysis) {
  const report = {
    timestamp: new Date().toISOString(),
    summary: {
      totalHeaderSize: analysis.totalSize,
      cookieSize: analysis.cookieSize,
      status: analysis.totalSize > 8192 ? 'CRITICAL' : analysis.totalSize > 4096 ? 'WARNING' : 'OK',
      exceedsLimit: analysis.totalSize > 8192
    },
    headers: analysis.headerAnalysis,
    cookies: analysis.cookies,
    recommendations: analysis.recommendations
  };
  
  // Zapisz raport do pliku
  const reportPath = './docs/HEADER_BLOAT_ANALYSIS_REPORT.json';
  fs.writeFileSync(reportPath, JSON.stringify(report, null, 2));
  
  console.log(`\nüìÑ RAPORT ZAPISANY: ${reportPath}`);
  
  return report;
}

/**
 * G≈Ç√≥wna funkcja analizy
 */
async function main() {
  try {
    // Analiza nag≈Ç√≥wk√≥w
    const { totalSize, headerAnalysis } = analyzeHeaderSize();
    
    // Analiza cookies
    const { totalCookieSize, cookies } = analyzeCookies();
    
    // Analiza limit√≥w serwer√≥w
    const serverLimits = analyzeServerLimits();
    
    // Generowanie rekomendacji
    const recommendations = generateOptimizationRecommendations(headerAnalysis, cookies, totalSize);
    
    // Generowanie raportu
    const report = generateReport({
      totalSize,
      headerAnalysis,
      cookieSize: totalCookieSize,
      cookies,
      serverLimits,
      recommendations
    });
    
    console.log('\n================================================================================');
    console.log('üìã PODSUMOWANIE ANALIZY');
    console.log('================================================================================');
    
    console.log(`üîç Przeanalizowano ${headerAnalysis.length} nag≈Ç√≥wk√≥w`);
    console.log(`üç™ Znaleziono ${cookies.length} cookies`);
    console.log(`üìè Ca≈Çkowity rozmiar: ${totalSize} bajt√≥w`);
    console.log(`üö® Status: ${report.summary.status}`);
    console.log(`üí° Wygenerowano ${recommendations.length} rekomendacji`);
    
    if (report.summary.exceedsLimit) {
      console.log('\nüö® AKCJA WYMAGANA: Nag≈Ç√≥wki przekraczajƒÖ bezpieczny limit!');
      console.log('   1. Natychmiast zwiƒôksz limit serwera');
      console.log('   2. Zoptymalizuj cookies wed≈Çug rekomendacji');
      console.log('   3. Przetestuj po zmianach');
    }
    
  } catch (error) {
    console.error('‚ùå B≈ÅƒÑD PODCZAS ANALIZY:', error.message);
    console.error('üîç Stack trace:', error.stack);
  }
}

// Uruchom analizƒô
main().catch(console.error);
