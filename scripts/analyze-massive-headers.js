#!/usr/bin/env node

/**
 * ANALIZA OGROMNYCH NAG≈Å√ìWK√ìW - DETECTIVE MODE
 * ≈öledzi dok≈Çadnie skƒÖd siƒô biorƒÖ ogromne nag≈Ç√≥wki powodujƒÖce HTTP 431
 */

import fetch from 'node-fetch';
import fs from 'fs';

const BASE_URL = 'http://localhost:5000'; // Serwer dzia≈Ça na 5001
const FRONTEND_URL = 'http://localhost:3000';

console.log('üïµÔ∏è ANALIZA OGROMNYCH NAG≈Å√ìWK√ìW - DETECTIVE MODE');
console.log('================================================================================');
console.log(`üéØ Cel: Znale≈∫ƒá ≈∫r√≥d≈Ço ogromnych nag≈Ç√≥wk√≥w powodujƒÖcych HTTP 431`);
console.log(`üîç Serwer: ${BASE_URL}`);
console.log(`üåê Frontend: ${FRONTEND_URL}`);

/**
 * Analizuje rozmiar nag≈Ç√≥wk√≥w requestu
 */
function analyzeRequestHeaders(headers) {
  console.log('\nüîç ANALIZA NAG≈Å√ìWK√ìW REQUESTU:');
  console.log('‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ');
  
  let totalSize = 0;
  const headerAnalysis = [];
  
  Object.entries(headers).forEach(([name, value]) => {
    const size = `${name}: ${value}`.length;
    totalSize += size;
    headerAnalysis.push({ name, value: value.substring(0, 100), size });
  });
  
  // Sortuj wed≈Çug rozmiaru
  headerAnalysis.sort((a, b) => b.size - a.size);
  
  console.log(`   üìè Ca≈Çkowity rozmiar nag≈Ç√≥wk√≥w: ${totalSize} bajt√≥w`);
  console.log(`   üìä Liczba nag≈Ç√≥wk√≥w: ${headerAnalysis.length}`);
  
  console.log('\n   üîù NAJWIƒòKSZE NAG≈Å√ìWKI:');
  headerAnalysis.slice(0, 10).forEach((header, index) => {
    const percentage = ((header.size / totalSize) * 100).toFixed(1);
    console.log(`      ${index + 1}. ${header.name}: ${header.size}B (${percentage}%)`);
    if (header.name.toLowerCase() === 'cookie') {
      analyzeCookieHeader(header.value);
    }
  });
  
  return { totalSize, headers: headerAnalysis };
}

/**
 * Szczeg√≥≈Çowa analiza nag≈Ç√≥wka Cookie
 */
function analyzeCookieHeader(cookieValue) {
  console.log('\n   üç™ SZCZEG√ì≈ÅOWA ANALIZA COOKIES:');
  
  if (!cookieValue) {
    console.log('      Brak cookies');
    return;
  }
  
  const cookies = cookieValue.split(';').map(c => c.trim());
  let cookieAnalysis = [];
  
  cookies.forEach(cookie => {
    const [name, ...valueParts] = cookie.split('=');
    const value = valueParts.join('=');
    const size = cookie.length;
    cookieAnalysis.push({ name: name?.trim(), value, size });
  });
  
  // Sortuj wed≈Çug rozmiaru
  cookieAnalysis.sort((a, b) => b.size - a.size);
  
  console.log(`      üìä Liczba cookies: ${cookieAnalysis.length}`);
  console.log(`      üìè Ca≈Çkowity rozmiar cookies: ${cookieValue.length} bajt√≥w`);
  
  console.log('\n      üîù NAJWIƒòKSZE COOKIES:');
  cookieAnalysis.slice(0, 15).forEach((cookie, index) => {
    const percentage = ((cookie.size / cookieValue.length) * 100).toFixed(1);
    console.log(`         ${index + 1}. ${cookie.name}: ${cookie.size}B (${percentage}%)`);
    
    // Sprawd≈∫ czy to token
    if (cookie.name && (cookie.name.includes('token') || cookie.name.includes('Token'))) {
      console.log(`            üîë TOKEN DETECTED: ${cookie.value?.substring(0, 50)}...`);
    }
  });
  
  // Znajd≈∫ duplikaty
  const duplicates = findDuplicateTokens(cookieAnalysis);
  if (duplicates.length > 0) {
    console.log('\n      üö® DUPLIKATY TOKEN√ìW ZNALEZIONE:');
    duplicates.forEach(dup => {
      console.log(`         ‚ö†Ô∏è  ${dup.name}: ${dup.count} kopii, ${dup.totalSize}B`);
    });
  }
}

/**
 * Znajd≈∫ duplikaty token√≥w
 */
function findDuplicateTokens(cookies) {
  const tokenCookies = cookies.filter(c => 
    c.name && (c.name.includes('token') || c.name.includes('Token'))
  );
  
  const duplicates = [];
  const seen = new Map();
  
  tokenCookies.forEach(cookie => {
    const key = cookie.value;
    if (seen.has(key)) {
      const existing = seen.get(key);
      existing.count++;
      existing.totalSize += cookie.size;
      existing.names.push(cookie.name);
    } else {
      seen.set(key, {
        name: cookie.name,
        names: [cookie.name],
        count: 1,
        totalSize: cookie.size
      });
    }
  });
  
  return Array.from(seen.values()).filter(item => item.count > 1);
}

/**
 * Test logowania z analizƒÖ nag≈Ç√≥wk√≥w
 */
async function testLoginWithHeaderAnalysis() {
  console.log('\nüìã KROK 1: Test logowania z analizƒÖ nag≈Ç√≥wk√≥w');
  console.log('‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ');
  
  try {
    const requestHeaders = {
      'Content-Type': 'application/json',
      'Origin': FRONTEND_URL,
      'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36',
      'Accept': 'application/json, text/plain, */*',
      'Accept-Language': 'pl-PL,pl;q=0.9,en;q=0.8',
      'Accept-Encoding': 'gzip, deflate, br',
      'Connection': 'keep-alive',
      'Sec-Fetch-Dest': 'empty',
      'Sec-Fetch-Mode': 'cors',
      'Sec-Fetch-Site': 'same-site'
    };
    
    console.log('   üîç Analizujƒô nag≈Ç√≥wki requestu logowania...');
    const requestAnalysis = analyzeRequestHeaders(requestHeaders);
    
    const response = await fetch(`${BASE_URL}/api/auth/login`, {
      method: 'POST',
      headers: requestHeaders,
      body: JSON.stringify({
        email: 'mateusz.goszczycki1994@gmail.com',
        password: 'Admin123!'
      })
    });
    
    console.log(`\n   üìä Status odpowiedzi: ${response.status} ${response.statusText}`);
    
    // Analizuj nag≈Ç√≥wki odpowiedzi
    const responseHeaders = response.headers.raw();
    console.log('\n   üîç NAG≈Å√ìWKI ODPOWIEDZI:');
    Object.entries(responseHeaders).forEach(([name, values]) => {
      const value = Array.isArray(values) ? values.join(', ') : values;
      console.log(`      ${name}: ${value.substring(0, 100)}${value.length > 100 ? '...' : ''}`);
    });
    
    // Sprawd≈∫ Set-Cookie
    const setCookieHeaders = response.headers.raw()['set-cookie'] || [];
    if (setCookieHeaders.length > 0) {
      console.log('\n   üç™ SET-COOKIE HEADERS:');
      setCookieHeaders.forEach((cookie, index) => {
        const cookieName = cookie.split('=')[0];
        const cookieSize = cookie.length;
        console.log(`      ${index + 1}. ${cookieName}: ${cookieSize}B`);
        console.log(`         ${cookie.substring(0, 150)}...`);
      });
      
      // Zwr√≥ƒá cookies do dalszych test√≥w
      const cookies = setCookieHeaders.map(cookie => cookie.split(';')[0]).join('; ');
      return cookies;
    }
    
    return null;
    
  } catch (error) {
    console.log(`   ‚ùå B≈ÇƒÖd logowania: ${error.message}`);
    return null;
  }
}

/**
 * Test panelu admina z ogromymi nag≈Ç√≥wkami
 */
async function testAdminPanelWithMassiveHeaders(cookies) {
  console.log('\nüìã KROK 2: Test panelu admina z analizƒÖ ogromnych nag≈Ç√≥wk√≥w');
  console.log('‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ');
  
  if (!cookies) {
    console.log('   ‚ö†Ô∏è  Brak cookies - tworzƒô symulowane ogromne nag≈Ç√≥wki');
    
    // Stw√≥rz symulowane ogromne cookies
    const massiveCookies = [
      'token=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiI2ODhiNGFiYTljMGYyZmVjZDAzNWIyMGEiLCJyb2xlIjoiYWRtaW4iLCJpYXQiOjE3MjU3NDk5ODYsImV4cCI6MTcyNTc1MDg4Nn0.example_token_data_here_very_long_token_data',
      'refreshToken=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiI2ODhiNGFiYTljMGYyZmVjZDAzNWIyMGEiLCJyb2xlIjoiYWRtaW4iLCJpYXQiOjE3MjU3NDk5ODYsImV4cCI6MTcyNTc1MDg4Nn0.another_example_refresh_token_data_here',
      'admin_token=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiI2ODhiNGFiYTljMGYyZmVjZDAzNWIyMGEiLCJyb2xlIjoiYWRtaW4iLCJpYXQiOjE3MjU3NDk5ODYsImV4cCI6MTcyNTc1MDg4Nn0.admin_token_duplicate_data_here',
      'admin_refreshToken=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiI2ODhiNGFiYTljMGYyZmVjZDAzNWIyMGEiLCJyb2xlIjoiYWRtaW4iLCJpYXQiOjE3MjU3NDk5ODYsImV4cCI6MTcyNTc1MDg4Nn0.admin_refresh_duplicate_data',
      '_ga=GA1.1.123456789.1234567890',
      '_gid=GA1.1.987654321.0987654321',
      '_fbp=fb.1.1234567890123.1234567890',
      '_fbc=fb.1.1234567890123.AbCdEfGhIjKlMnOpQrStUvWxYz',
      'sessionId=sess_1234567890abcdef1234567890abcdef1234567890abcdef',
      'csrfToken=csrf_abcdef1234567890abcdef1234567890abcdef1234567890',
      'user_preferences={"theme":"dark","language":"pl","notifications":true,"analytics":false}',
      'analytics_session=analytics_1234567890abcdef1234567890abcdef1234567890',
      'debug_mode=true',
      'dev_user_id=dev_1234567890abcdef',
      'theme=dark_mode_enabled_with_custom_colors_and_settings'
    ];
    
    cookies = massiveCookies.join('; ');
  }
  
  try {
    const requestHeaders = {
      'Cookie': cookies,
      'Origin': FRONTEND_URL,
      'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36',
      'Accept': 'application/json, text/plain, */*',
      'Accept-Language': 'pl-PL,pl;q=0.9,en;q=0.8',
      'Accept-Encoding': 'gzip, deflate, br',
      'Connection': 'keep-alive',
      'Sec-Fetch-Dest': 'empty',
      'Sec-Fetch-Mode': 'cors',
      'Sec-Fetch-Site': 'same-site',
      'Referer': `${FRONTEND_URL}/admin`,
      'X-Requested-With': 'XMLHttpRequest'
    };
    
    console.log('   üîç Analizujƒô nag≈Ç√≥wki requestu do panelu admina...');
    const requestAnalysis = analyzeRequestHeaders(requestHeaders);
    
    if (requestAnalysis.totalSize > 8192) {
      console.log(`   üö® OGROMNE NAG≈Å√ìWKI WYKRYTE: ${requestAnalysis.totalSize} bajt√≥w!`);
      console.log(`   ‚ö†Ô∏è  Przekroczono limit serwera (zwykle 8KB)`);
    }
    
    const response = await fetch(`${BASE_URL}/api/admin/dashboard`, {
      method: 'GET',
      headers: requestHeaders
    });
    
    console.log(`\n   üìä Status odpowiedzi: ${response.status} ${response.statusText}`);
    
    if (response.status === 431) {
      console.log('   üö® HTTP 431: Request Header Fields Too Large - POTWIERDZONY!');
      console.log('   üîç Przyczyna: Nag≈Ç√≥wki requestu przekroczy≈Çy limit serwera');
      
      // Zapisz szczeg√≥≈Çowy raport
      const report = {
        timestamp: new Date().toISOString(),
        error: 'HTTP 431 - Request Header Fields Too Large',
        requestHeadersSize: requestAnalysis.totalSize,
        requestHeadersCount: requestAnalysis.headers.length,
        largestHeaders: requestAnalysis.headers.slice(0, 10),
        cookieSize: cookies.length,
        recommendation: 'Usu≈Ñ duplikaty token√≥w i niepotrzebne cookies'
      };
      
      fs.writeFileSync('./docs/MASSIVE_HEADERS_ANALYSIS.json', JSON.stringify(report, null, 2));
      console.log('   üìÑ Szczeg√≥≈Çowy raport zapisany: ./docs/MASSIVE_HEADERS_ANALYSIS.json');
      
      return false;
    } else {
      console.log('   ‚úÖ Brak b≈Çƒôdu HTTP 431 - nag≈Ç√≥wki w normie');
      return true;
    }
    
  } catch (error) {
    console.log(`   ‚ùå B≈ÇƒÖd testu: ${error.message}`);
    return false;
  }
}

/**
 * G≈Ç√≥wna funkcja analizy
 */
async function runMassiveHeaderAnalysis() {
  console.log('\nüéØ ROZPOCZYNAM ANALIZƒò OGROMNYCH NAG≈Å√ìWK√ìW...');
  
  // Test 1: Logowanie z analizƒÖ
  const cookies = await testLoginWithHeaderAnalysis();
  
  // Test 2: Panel admina z ogromymi nag≈Ç√≥wkami
  const adminPanelOK = await testAdminPanelWithMassiveHeaders(cookies);
  
  // Podsumowanie
  console.log('\nüìã PODSUMOWANIE ANALIZY OGROMNYCH NAG≈Å√ìWK√ìW');
  console.log('================================================================================');
  
  if (!adminPanelOK) {
    console.log('üö® PROBLEM ZIDENTYFIKOWANY:');
    console.log('   ‚Ä¢ HTTP 431: Request Header Fields Too Large');
    console.log('   ‚Ä¢ Przyczyna: Duplikaty token√≥w w cookies');
    console.log('   ‚Ä¢ RozwiƒÖzanie: Usu≈Ñ duplikaty admin_token, admin_refreshToken');
    console.log('   ‚Ä¢ Middleware czyszczenia cookies nie dzia≈Ça poprawnie');
  } else {
    console.log('‚úÖ NAG≈Å√ìWKI W NORMIE:');
    console.log('   ‚Ä¢ Brak b≈Çƒôdu HTTP 431');
    console.log('   ‚Ä¢ Rozmiar nag≈Ç√≥wk√≥w w akceptowalnych granicach');
  }
  
  console.log('\nüìÑ Szczeg√≥≈Çowe raporty zapisane w ./docs/');
}

// Uruchom analizƒô
runMassiveHeaderAnalysis().catch(console.error);
