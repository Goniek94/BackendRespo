/**
 * ANALIZA PRZEP≈ÅYWU TOKEN√ìW
 * Sprawdza jak tokeny sƒÖ ustawiane przy logowaniu i u≈ºywane w panelu admin
 */

import jwt from 'jsonwebtoken';
import fetch from 'node-fetch';
import dotenv from 'dotenv';

dotenv.config();

console.log('üîç ANALIZA PRZEP≈ÅYWU TOKEN√ìW');
console.log('============================\n');

const analyzeTokenFlow = async () => {
  console.log('1. LOGOWANIE U≈ªYTKOWNIKA:');
  console.log('==========================');
  
  try {
    // Test logowania
    const loginResponse = await fetch('http://localhost:5000/api/auth/login', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({
        email: 'mateusz.goszczycki1994@gmail.com',
        password: 'Mateusz1994!'
      })
    });
    
    console.log('Status logowania:', loginResponse.status);
    
    if (loginResponse.status === 200) {
      // Sprawd≈∫ nag≈Ç√≥wki Set-Cookie
      const setCookieHeaders = loginResponse.headers.raw()['set-cookie'] || [];
      console.log('\nüìç TOKENY USTAWIONE PRZY LOGOWANIU:');
      
      let accessToken = null;
      let refreshToken = null;
      
      setCookieHeaders.forEach((cookie, index) => {
        console.log(`Cookie ${index + 1}:`, cookie.substring(0, 100) + '...');
        
        if (cookie.startsWith('token=')) {
          accessToken = cookie.split('token=')[1].split(';')[0];
          console.log('  ‚Üí ACCESS TOKEN znaleziony');
        }
        
        if (cookie.startsWith('refreshToken=')) {
          refreshToken = cookie.split('refreshToken=')[1].split(';')[0];
          console.log('  ‚Üí REFRESH TOKEN znaleziony');
        }
      });
      
      // Dekoduj tokeny
      if (accessToken) {
        console.log('\nüîç ANALIZA ACCESS TOKEN:');
        try {
          const decoded = jwt.decode(accessToken);
          console.log('Payload:', JSON.stringify(decoded, null, 2));
          console.log('Expiry:', new Date(decoded.exp * 1000));
          console.log('Time to expiry:', Math.round((decoded.exp * 1000 - Date.now()) / 1000), 'sekund');
        } catch (error) {
          console.log('B≈ÇƒÖd dekodowania access token:', error.message);
        }
      }
      
      if (refreshToken) {
        console.log('\nüîç ANALIZA REFRESH TOKEN:');
        try {
          const decoded = jwt.decode(refreshToken);
          console.log('Payload:', JSON.stringify(decoded, null, 2));
          console.log('Expiry:', new Date(decoded.exp * 1000));
          console.log('Time to expiry:', Math.round((decoded.exp * 1000 - Date.now()) / 1000), 'sekund');
        } catch (error) {
          console.log('B≈ÇƒÖd dekodowania refresh token:', error.message);
        }
      }
      
      // Test dostƒôpu do panelu admin
      console.log('\n\n2. DOSTƒòP DO PANELU ADMIN:');
      console.log('===========================');
      
      if (accessToken) {
        try {
          const adminResponse = await fetch('http://localhost:5000/api/admin-panel/dashboard/stats', {
            method: 'GET',
            headers: {
              'Cookie': `token=${accessToken}; refreshToken=${refreshToken}`
            }
          });
          
          console.log('Status panelu admin:', adminResponse.status);
          
          if (adminResponse.status === 200) {
            console.log('‚úÖ SUKCES: Panel admin dzia≈Ça z tokenami z logowania');
            const adminData = await adminResponse.text();
            console.log('Odpowied≈∫:', adminData.substring(0, 200) + '...');
          } else {
            console.log('‚ùå B≈ÅƒÑD: Panel admin nie dzia≈Ça');
            const errorData = await adminResponse.text();
            console.log('B≈ÇƒÖd:', errorData);
          }
          
        } catch (error) {
          console.log('‚ùå B≈ÇƒÖd dostƒôpu do panelu admin:', error.message);
        }
      }
      
    } else {
      console.log('‚ùå Logowanie nie powiod≈Ço siƒô');
      const errorData = await loginResponse.text();
      console.log('B≈ÇƒÖd:', errorData);
    }
    
  } catch (error) {
    console.log('‚ùå B≈ÇƒÖd podczas testowania:', error.message);
  }
  
  console.log('\n\n3. PODSUMOWANIE PRZEP≈ÅYWU TOKEN√ìW:');
  console.log('===================================');
  console.log('1. U≈ºytkownik loguje siƒô przez /api/auth/login');
  console.log('2. Serwer ustawia cookies: token (access) + refreshToken');
  console.log('3. Panel admin u≈ºywa tych samych cookies do uwierzytelniania');
  console.log('4. Admin middleware sprawdza req.cookies.token');
  console.log('5. Je≈õli token wygas≈Ç, pr√≥buje refresh z req.cookies.refreshToken');
  console.log('\nüìã KLUCZOWE PUNKTY:');
  console.log('- Jeden zestaw token√≥w dla ca≈Çej aplikacji');
  console.log('- Admin panel NIE ma osobnych token√≥w');
  console.log('- U≈ºywa standardowego middleware auth.js');
  console.log('- Admin middleware to dodatkowa warstwa sprawdzajƒÖca role');
};

analyzeTokenFlow().catch(console.error);
