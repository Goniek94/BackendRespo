import mongoose from 'mongoose';
import dotenv from 'dotenv';
import Notification from '../models/communication/notification.js';
import User from '../models/user/user.js';

// Load environment variables
dotenv.config();

const MONGODB_URI = process.env.MONGODB_URI || 'mongodb://localhost:27017/marketplace';

async function diagnoseNotificationConnection() {
  try {
    console.log('üîÑ ≈ÅƒÖczenie z bazƒÖ danych...');
    await mongoose.connect(MONGODB_URI);
    console.log('‚úÖ Po≈ÇƒÖczono z bazƒÖ danych');

    console.log('\nüìä DIAGNOZA SYSTEMU POWIADOMIE≈É');
    console.log('=====================================');

    // 1. Sprawd≈∫ powiadomienia w bazie danych
    console.log('\n1Ô∏è‚É£ SPRAWDZANIE POWIADOMIE≈É W BAZIE DANYCH');
    const totalNotifications = await Notification.countDocuments();
    const unreadNotifications = await Notification.countDocuments({ isRead: false });
    console.log(`üìä ≈ÅƒÖczna liczba powiadomie≈Ñ: ${totalNotifications}`);
    console.log(`üìä Nieprzeczytane powiadomienia: ${unreadNotifications}`);

    // Poka≈º przyk≈Çadowe powiadomienia
    const sampleNotifications = await Notification.find().sort({ createdAt: -1 }).limit(5);
    console.log('\nüìã Przyk≈Çadowe powiadomienia:');
    sampleNotifications.forEach((notif, index) => {
      console.log(`  ${index + 1}. [${notif.type}] ${notif.title} - User: ${notif.user} - ${notif.isRead ? 'Przeczytane' : 'Nieprzeczytane'}`);
    });

    // 2. Sprawd≈∫ u≈ºytkownik√≥w
    console.log('\n2Ô∏è‚É£ SPRAWDZANIE U≈ªYTKOWNIK√ìW');
    const totalUsers = await User.countDocuments();
    console.log(`üë• ≈ÅƒÖczna liczba u≈ºytkownik√≥w: ${totalUsers}`);

    // Poka≈º u≈ºytkownik√≥w z powiadomieniami
    const usersWithNotifications = await Notification.aggregate([
      { $group: { _id: '$user', count: { $sum: 1 } } },
      { $sort: { count: -1 } },
      { $limit: 5 }
    ]);
    
    console.log('\nüë• U≈ºytkownicy z powiadomieniami:');
    for (const userStat of usersWithNotifications) {
      try {
        const user = await User.findById(userStat._id);
        const userName = user ? user.email || user.username || 'Nieznany' : 'U≈ºytkownik nie znaleziony';
        console.log(`  - ${userName} (${userStat._id}): ${userStat.count} powiadomie≈Ñ`);
      } catch (error) {
        console.log(`  - ID: ${userStat._id}: ${userStat.count} powiadomie≈Ñ (b≈ÇƒÖd pobierania danych u≈ºytkownika)`);
      }
    }

    // 3. Sprawd≈∫ API endpoints
    console.log('\n3Ô∏è‚É£ TESTOWANIE API ENDPOINTS');
    console.log('üîó Dostƒôpne endpointy powiadomie≈Ñ:');
    console.log('  - GET /api/notifications - pobieranie wszystkich powiadomie≈Ñ');
    console.log('  - GET /api/notifications/unread - pobieranie nieprzeczytanych');
    console.log('  - GET /api/notifications/unread-count - liczba nieprzeczytanych');
    console.log('  - PATCH /api/notifications/:id/read - oznaczanie jako przeczytane');
    console.log('  - DELETE /api/notifications/:id - usuwanie powiadomienia');

    // 4. Sprawd≈∫ konfiguracjƒô WebSocket
    console.log('\n4Ô∏è‚É£ SPRAWDZANIE KONFIGURACJI WEBSOCKET');
    console.log('‚ö†Ô∏è  POTENCJALNE PROBLEMY:');
    console.log('  1. Socket.IO authentication failed - missing token');
    console.log('  2. Frontend mo≈ºe nie wysy≈Çaƒá tokenu JWT w WebSocket connection');
    console.log('  3. Backend mo≈ºe niepoprawnie weryfikowaƒá token WebSocket');
    console.log('  4. CORS mo≈ºe blokowaƒá po≈ÇƒÖczenia WebSocket');

    // 5. Rekomendacje naprawy
    console.log('\n5Ô∏è‚É£ REKOMENDACJE NAPRAWY');
    console.log('üîß Kroki do wykonania:');
    console.log('  1. Sprawd≈∫ socketService.js - autentykacja WebSocket');
    console.log('  2. Sprawd≈∫ frontend SocketContext - wysy≈Çanie tokenu');
    console.log('  3. Sprawd≈∫ UnifiedNotificationService - pobieranie z API');
    console.log('  4. Sprawd≈∫ CORS w app.js');
    console.log('  5. Sprawd≈∫ czy notificationManager jest zainicjalizowany');

    console.log('\n‚úÖ Diagnoza zako≈Ñczona');

  } catch (error) {
    console.error('‚ùå B≈ÇƒÖd podczas diagnozy:', error);
  } finally {
    await mongoose.disconnect();
    console.log('üîå Roz≈ÇƒÖczono z bazƒÖ danych');
  }
}

// Uruchom diagnozƒô
diagnoseNotificationConnection();
