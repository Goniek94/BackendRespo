/**
 * Skrypt diagnostyczny do identyfikacji duplikacji w systemie powiadomie≈Ñ
 * Sprawdza potencjalne problemy z powiadomieniami na frontendzie
 */

import fs from 'fs';
import path from 'path';

console.log('üîç DIAGNOZA DUPLIKACJI POWIADOMIE≈É FRONTEND');
console.log('='.repeat(50));

const frontendPath = '../marketplace-frontend/src';

// Funkcja do czytania pliku
const readFile = (filePath) => {
  try {
    return fs.readFileSync(filePath, 'utf8');
  } catch (error) {
    return null;
  }
};

// Sprawd≈∫ duplikacje serwis√≥w
console.log('\nüìã 1. ANALIZA SERWIS√ìW POWIADOMIE≈É:');
console.log('-'.repeat(30));

const notificationsJs = readFile(path.join(frontendPath, 'services/notifications.js'));
const notificationServiceJs = readFile(path.join(frontendPath, 'services/NotificationService.js'));

if (notificationsJs && notificationServiceJs) {
  console.log('‚ùå PROBLEM: Znaleziono DWA serwisy powiadomie≈Ñ:');
  console.log('   - services/notifications.js (Socket.IO)');
  console.log('   - services/NotificationService.js (HTTP API)');
  console.log('   ‚ö†Ô∏è  To mo≈ºe powodowaƒá konflikty i duplikacje!');
} else {
  console.log('‚úÖ Brak duplikacji serwis√≥w');
}

// Sprawd≈∫ NotificationContext
console.log('\nüìã 2. ANALIZA NOTIFICATION CONTEXT:');
console.log('-'.repeat(30));

const notificationContext = readFile(path.join(frontendPath, 'contexts/NotificationContext.js'));
if (notificationContext) {
  // Sprawd≈∫ czy u≈ºywa obu serwis√≥w
  const usesNotificationsJs = notificationContext.includes("from '../services/notifications'");
  const usesNotificationServiceJs = notificationContext.includes("from '../services/NotificationService'");
  const usesAxios = notificationContext.includes("import axios");
  
  console.log(`   - U≈ºywa notifications.js: ${usesNotificationsJs ? '‚úÖ' : '‚ùå'}`);
  console.log(`   - U≈ºywa NotificationService.js: ${usesNotificationServiceJs ? '‚úÖ' : '‚ùå'}`);
  console.log(`   - U≈ºywa axios bezpo≈õrednio: ${usesAxios ? '‚úÖ' : '‚ùå'}`);
  
  if ((usesNotificationsJs && usesNotificationServiceJs) || (usesNotificationsJs && usesAxios)) {
    console.log('   ‚ùå PROBLEM: Context u≈ºywa wielu sposob√≥w komunikacji z API!');
  }
  
  // Sprawd≈∫ event listenery
  const eventListeners = [
    'notification',
    'new_notification',
    'notification_updated',
    'all_notifications_read',
    'notification_deleted'
  ];
  
  console.log('\n   Event Listeners:');
  eventListeners.forEach(event => {
    const hasOn = notificationContext.includes(`notificationService.on('${event}'`);
    const hasOff = notificationContext.includes(`notificationService.off('${event}'`);
    console.log(`   - ${event}: on=${hasOn ? '‚úÖ' : '‚ùå'}, off=${hasOff ? '‚úÖ' : '‚ùå'}`);
    
    if (hasOn && !hasOff) {
      console.log(`     ‚ö†Ô∏è  Brak cleanup dla ${event}!`);
    }
  });
}

// Sprawd≈∫ komponenty u≈ºywajƒÖce powiadomie≈Ñ
console.log('\nüìã 3. ANALIZA KOMPONENT√ìW:');
console.log('-'.repeat(30));

const componentsToCheck = [
  'components/Navigation/Navigation.js',
  'components/profil/navigation/ProfileNavigation.js',
  'components/notifications/Notifications.js',
  'components/notifications/NotificationBadge.js'
];

componentsToCheck.forEach(componentPath => {
  const content = readFile(path.join(frontendPath, componentPath));
  if (content) {
    const usesNotificationContext = content.includes('useNotifications');
    const usesNotificationService = content.includes('NotificationService');
    const usesAxios = content.includes('axios');
    
    console.log(`\n   ${componentPath}:`);
    console.log(`   - U≈ºywa useNotifications: ${usesNotificationContext ? '‚úÖ' : '‚ùå'}`);
    console.log(`   - U≈ºywa NotificationService: ${usesNotificationService ? '‚úÖ' : '‚ùå'}`);
    console.log(`   - U≈ºywa axios: ${usesAxios ? '‚úÖ' : '‚ùå'}`);
  }
});

// Sprawd≈∫ konfiguracjƒô API
console.log('\nüìã 4. ANALIZA KONFIGURACJI API:');
console.log('-'.repeat(30));

const apiConfig = readFile(path.join(frontendPath, 'services/api/config.js'));
if (apiConfig) {
  const apiUrlMatch = apiConfig.match(/process\.env\.REACT_APP_API_URL \|\| '([^']+)'/);
  if (apiUrlMatch) {
    console.log(`   - API URL: ${apiUrlMatch[1]}`);
  }
  
  const envFile = readFile('../marketplace-frontend/.env');
  if (envFile) {
    const envApiUrl = envFile.match(/REACT_APP_API_URL=(.+)/);
    if (envApiUrl) {
      console.log(`   - .env API URL: ${envApiUrl[1]}`);
    }
  }
}

// Rekomendacje naprawy
console.log('\nüîß REKOMENDACJE NAPRAWY:');
console.log('-'.repeat(30));
console.log('1. ‚ùå Usu≈Ñ jeden z serwis√≥w powiadomie≈Ñ (zalecane: zostaw NotificationService.js)');
console.log('2. üîÑ Zaktualizuj NotificationContext aby u≈ºywa≈Ç tylko jednego serwisu');
console.log('3. üßπ Upewnij siƒô, ≈ºe wszystkie event listenery majƒÖ cleanup');
console.log('4. ‚úÖ Sprawd≈∫ czy wszystkie komponenty u≈ºywajƒÖ useNotifications hook');
console.log('5. üîç Przetestuj system powiadomie≈Ñ po zmianach');

console.log('\n‚úÖ Diagnoza zako≈Ñczona!');
