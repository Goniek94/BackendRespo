/**
 * Skrypt sprawdzajƒÖcy konkretnie nowe og≈Çoszenie BMW z wszystkimi polami
 */

import mongoose from 'mongoose';
import Ad from './models/listings/ad.js';
import dotenv from 'dotenv';

// Za≈Çaduj zmienne ≈õrodowiskowe
dotenv.config();

/**
 * Funkcja sprawdzajƒÖca nowe og≈Çoszenie BMW
 */
async function sprawdzNoweOgloszenieBMW() {
  try {
    console.log('üîç SPRAWDZANIE NOWEGO OG≈ÅOSZENIA BMW Z WSZYSTKIMI POLAMI');
    console.log('=' .repeat(60));

    // Po≈ÇƒÖcz z bazƒÖ danych
    await mongoose.connect(process.env.MONGODB_URI);
    console.log('‚úÖ Po≈ÇƒÖczono z bazƒÖ danych MongoDB');

    // Znajd≈∫ najnowsze og≈Çoszenie BMW (kt√≥re w≈Ça≈õnie dodali≈õmy)
    const bmwOgloszenie = await Ad.findOne({ 
      brand: 'BMW', 
      model: 'X5',
      headline: { $regex: 'Test wszystkich p√≥l' }
    }).sort({ createdAt: -1 });
    
    if (!bmwOgloszenie) {
      console.log('‚ùå Nie znaleziono og≈Çoszenia BMW X5 z testem');
      return;
    }

    console.log(`\nüìã ZNALEZIONE OG≈ÅOSZENIE BMW: ${bmwOgloszenie._id}`);
    console.log(`   Marka: ${bmwOgloszenie.brand}`);
    console.log(`   Model: ${bmwOgloszenie.model}`);
    console.log(`   Nag≈Ç√≥wek: ${bmwOgloszenie.headline}`);

    // Konwertuj na obiekt (tak jak robi readAdHandler)
    const ogloszenieObj = bmwOgloszenie.toObject();

    console.log('\nüéØ SPRAWDZENIE KLUCZOWYCH P√ìL (kt√≥re wcze≈õniej brakowa≈Çy):');
    console.log('=' .repeat(60));
    
    const kluczowePola = {
      'countryOfOrigin': 'Kraj pochodzenia',
      'leasingCompany': 'Firma leasingowa (cesja)',
      'remainingInstallments': 'Pozosta≈Çe raty',
      'installmentAmount': 'Wysoko≈õƒá raty',
      'cessionFee': 'Op≈Çata za cesjƒô',
      'exchangeOffer': 'Propozycja zamiany',
      'exchangeValue': 'Warto≈õƒá zamiany',
      'exchangePayment': 'Dop≈Çata przy zamianie',
      'exchangeConditions': 'Warunki zamiany'
    };

    let polePrzeszly = 0;
    for (const [pole, opis] of Object.entries(kluczowePola)) {
      const warto≈õƒá = ogloszenieObj[pole];
      const status = warto≈õƒá !== undefined && warto≈õƒá !== null && warto≈õƒá !== '' 
        ? `‚úÖ WIDOCZNE: "${warto≈õƒá}"` 
        : '‚ùå BRAK WARTO≈öCI';
      console.log(`   ${opis.padEnd(30)} ‚Üí ${status}`);
      
      if (warto≈õƒá !== undefined && warto≈õƒá !== null && warto≈õƒá !== '') {
        polePrzeszly++;
      }
    }

    console.log('\nüìä WYNIK TESTU:');
    console.log('=' .repeat(60));
    console.log(`‚úÖ Pola z warto≈õciami: ${polePrzeszly}/${Object.keys(kluczowePola).length}`);
    console.log(`üìà Procent sukcesu: ${Math.round((polePrzeszly / Object.keys(kluczowePola).length) * 100)}%`);

    if (polePrzeszly === Object.keys(kluczowePola).length) {
      console.log('\nüéâ SUKCES! Wszystkie pola zosta≈Çy poprawnie zapisane i sƒÖ widoczne!');
    } else {
      console.log('\n‚ö†Ô∏è  Niekt√≥re pola nadal nie sƒÖ zapisywane poprawnie.');
    }

    console.log('\nüîç SYMULACJA SZCZEG√ì≈Å√ìW OG≈ÅOSZENIA (getAdById):');
    console.log('=' .repeat(60));
    console.log('To jest dok≈Çadnie to, co zobaczy u≈ºytkownik w szczeg√≥≈Çach og≈Çoszenia:');
    console.log(`- Kraj pochodzenia: ${ogloszenieObj.countryOfOrigin || 'BRAK'}`);
    console.log(`- Firma leasingowa: ${ogloszenieObj.leasingCompany || 'BRAK'}`);
    console.log(`- Pozosta≈Çe raty: ${ogloszenieObj.remainingInstallments || 'BRAK'}`);
    console.log(`- Wysoko≈õƒá raty: ${ogloszenieObj.installmentAmount || 'BRAK'} PLN`);
    console.log(`- Op≈Çata za cesjƒô: ${ogloszenieObj.cessionFee || 'BRAK'} PLN`);
    console.log(`- Propozycja zamiany: ${ogloszenieObj.exchangeOffer || 'BRAK'}`);
    console.log(`- Warto≈õƒá zamiany: ${ogloszenieObj.exchangeValue || 'BRAK'} PLN`);
    console.log(`- Dop≈Çata przy zamianie: ${ogloszenieObj.exchangePayment || 'BRAK'} PLN`);
    console.log(`- Warunki zamiany: ${ogloszenieObj.exchangeConditions || 'BRAK'}`);

  } catch (error) {
    console.error('‚ùå B≈ÇƒÖd podczas sprawdzania:', error);
  } finally {
    await mongoose.disconnect();
    console.log('\nüîå Roz≈ÇƒÖczono z bazƒÖ danych');
  }
}

// Uruchom sprawdzenie
sprawdzNoweOgloszenieBMW();
