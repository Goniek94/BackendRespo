/**
 * Skrypt sprawdzajƒÖcy pole sellerType w og≈Çoszeniach
 */

import mongoose from 'mongoose';
import Ad from './models/listings/ad.js';
import dotenv from 'dotenv';

// Za≈Çaduj zmienne ≈õrodowiskowe
dotenv.config();

/**
 * Funkcja sprawdzajƒÖca sellerType w og≈Çoszeniach
 */
async function sprawdzSellerType() {
  try {
    console.log('üîç SPRAWDZANIE POLA SELLERTYPE W OG≈ÅOSZENIACH');
    console.log('=' .repeat(60));

    // Po≈ÇƒÖcz z bazƒÖ danych
    await mongoose.connect(process.env.MONGODB_URI);
    console.log('‚úÖ Po≈ÇƒÖczono z bazƒÖ danych MongoDB');

    // Znajd≈∫ najnowsze og≈Çoszenie BMW (kt√≥re w≈Ça≈õnie dodali≈õmy z sellerType: 'Firma')
    const bmwOgloszenie = await Ad.findOne({ 
      brand: 'BMW', 
      model: 'X5',
      headline: { $regex: 'Test wszystkich p√≥l' }
    }).sort({ createdAt: -1 });
    
    if (bmwOgloszenie) {
      console.log(`\nüìã OG≈ÅOSZENIE BMW X5 (ID: ${bmwOgloszenie._id}):`);
      console.log(`   sellerType w bazie: "${bmwOgloszenie.sellerType}"`);
      console.log(`   Typ: ${typeof bmwOgloszenie.sellerType}`);
      
      // Sprawd≈∫ jak wyglƒÖda w obiekcie zwracanym przez getAdById
      const adObj = bmwOgloszenie.toObject();
      console.log(`   sellerType w szczeg√≥≈Çach: "${adObj.sellerType}"`);
    }

    // Sprawd≈∫ te≈º inne og≈Çoszenia
    console.log('\nüîç PRZEGLƒÑD WSZYSTKICH OG≈ÅOSZE≈É I ICH SELLERTYPE:');
    console.log('=' .repeat(60));
    
    const wszystkieOgloszenia = await Ad.find({}).select('_id brand model sellerType ownerName').limit(10);
    
    for (const ogloszenie of wszystkieOgloszenia) {
      const adObj = ogloszenie.toObject();
      console.log(`${ogloszenie._id} | ${ogloszenie.brand} ${ogloszenie.model} | sellerType: "${ogloszenie.sellerType}" | owner: ${ogloszenie.ownerName}`);
    }

    // Sprawd≈∫ statystyki sellerType
    console.log('\nüìä STATYSTYKI SELLERTYPE:');
    console.log('=' .repeat(60));
    
    const statystyki = await Ad.aggregate([
      {
        $group: {
          _id: '$sellerType',
          count: { $sum: 1 }
        }
      },
      {
        $sort: { count: -1 }
      }
    ]);
    
    for (const stat of statystyki) {
      console.log(`   "${stat._id}": ${stat.count} og≈Çosze≈Ñ`);
    }

    // Test mapowania sellerType
    console.log('\nüß™ TEST MAPOWANIA SELLERTYPE:');
    console.log('=' .repeat(60));
    
    // Importuj funkcjƒô mapowania
    const { mapFormDataToBackend } = await import('./routes/listings/handlers/createAdHandler.js');
    
    const testCases = [
      { input: 'Firma', expected: 'Firma' },
      { input: 'firma', expected: 'Firma' },
      { input: 'company', expected: 'Firma' },
      { input: 'Prywatny', expected: 'Prywatny' },
      { input: 'prywatny', expected: 'Prywatny' },
      { input: 'private', expected: 'Prywatny' },
      { input: undefined, expected: 'Prywatny' }
    ];
    
    for (const testCase of testCases) {
      const result = mapFormDataToBackend({ sellerType: testCase.input });
      const status = result.sellerType === testCase.expected ? '‚úÖ' : '‚ùå';
      console.log(`   "${testCase.input}" ‚Üí "${result.sellerType}" ${status}`);
    }

  } catch (error) {
    console.error('‚ùå B≈ÇƒÖd podczas sprawdzania:', error);
  } finally {
    await mongoose.disconnect();
    console.log('\nüîå Roz≈ÇƒÖczono z bazƒÖ danych');
  }
}

// Uruchom sprawdzenie
sprawdzSellerType();
