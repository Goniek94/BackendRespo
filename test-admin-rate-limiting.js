/**
 * TEST RATE LIMITING DLA ADMIN√ìW
 * Sprawdza czy admini sƒÖ pomijani w rate limiting
 */

import fetch from 'node-fetch';

const API_URL = 'http://localhost:5000/api'; // Serwer dzia≈Ça na porcie 5000

const adminUser = {
  email: 'mateusz.goszczycki1994@gmail.com', // Tw√≥j email z rolƒÖ admin
  password: 'Neluchu321.'
};

const regularUser = {
  email: 'test@test.com', // Zwyk≈Çy u≈ºytkownik
  password: 'test123'
};

async function testAdminRateLimiting() {
  console.log('üîí TESTOWANIE RATE LIMITING DLA ADMIN√ìW\n');
  
  try {
    // ========================================
    // 1. TEST ZWYK≈ÅEGO U≈ªYTKOWNIKA (POWINIEN BYƒÜ RATE LIMITED)
    // ========================================
    console.log('1Ô∏è‚É£ Test rate limiting dla zwyk≈Çego u≈ºytkownika...');
    
    let rateLimitHit = false;
    for (let i = 1; i <= 6; i++) {
      console.log(`   Pr√≥ba ${i}/6 logowania zwyk≈Çym u≈ºytkownikiem...`);
      
      const response = await fetch(`${API_URL}/users/login`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          email: regularUser.email,
          password: 'wrong-password' // Celowo b≈Çƒôdne has≈Ço
        })
      });
      
      console.log(`   Status: ${response.status}`);
      
      if (response.status === 429) {
        console.log('   ‚úÖ Rate limiting zadzia≈Ça≈Ç dla zwyk≈Çego u≈ºytkownika!');
        rateLimitHit = true;
        break;
      }
      
      // Kr√≥tka pauza miƒôdzy pr√≥bami
      await new Promise(resolve => setTimeout(resolve, 500));
    }
    
    if (!rateLimitHit) {
      console.log('   ‚ö†Ô∏è Rate limiting nie zadzia≈Ça≈Ç dla zwyk≈Çego u≈ºytkownika');
    }
    
    // ========================================
    // 2. TEST ADMINA (POWINIEN BYƒÜ POMINIƒòTY)
    // ========================================
    console.log('\n2Ô∏è‚É£ Test rate limiting dla admina...');
    
    let adminBlocked = false;
    for (let i = 1; i <= 10; i++) {
      console.log(`   Pr√≥ba ${i}/10 logowania adminem...`);
      
      const response = await fetch(`${API_URL}/users/login`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          email: adminUser.email,
          password: 'wrong-password' // Celowo b≈Çƒôdne has≈Ço
        })
      });
      
      console.log(`   Status: ${response.status}`);
      
      if (response.status === 429) {
        console.log('   ‚ùå Admin zosta≈Ç zablokowany przez rate limiting!');
        adminBlocked = true;
        break;
      } else if (response.status === 401) {
        console.log('   ‚úÖ Admin nie jest blokowany - tylko b≈Çƒôdne has≈Ço');
      }
      
      // Kr√≥tka pauza miƒôdzy pr√≥bami
      await new Promise(resolve => setTimeout(resolve, 200));
    }
    
    // ========================================
    // 3. TEST PRAWID≈ÅOWEGO LOGOWANIA ADMINA
    // ========================================
    console.log('\n3Ô∏è‚É£ Test prawid≈Çowego logowania admina...');
    
    const loginResponse = await fetch(`${API_URL}/users/login`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(adminUser)
    });
    
    console.log(`   Status logowania: ${loginResponse.status}`);
    
    if (loginResponse.status === 200) {
      const loginData = await loginResponse.json();
      console.log('   ‚úÖ Admin zalogowa≈Ç siƒô pomy≈õlnie!');
      console.log(`   üë§ U≈ºytkownik: ${loginData.user?.name}`);
      console.log(`   üîë Rola: ${loginData.user?.role}`);
    } else if (loginResponse.status === 429) {
      console.log('   ‚ùå Admin zosta≈Ç zablokowany przez rate limiting!');
    } else {
      const errorData = await loginResponse.json();
      console.log(`   ‚ùå B≈ÇƒÖd logowania: ${errorData.message}`);
    }
    
    // ========================================
    // PODSUMOWANIE
    // ========================================
    console.log('\nüéØ PODSUMOWANIE TEST√ìW:');
    console.log('');
    
    if (rateLimitHit && !adminBlocked) {
      console.log('‚úÖ RATE LIMITING DZIA≈ÅA PRAWID≈ÅOWO:');
      console.log('   ‚Ä¢ Zwykli u≈ºytkownicy sƒÖ blokowani');
      console.log('   ‚Ä¢ Admini sƒÖ pomijani');
      console.log('   ‚Ä¢ System bezpiecze≈Ñstwa dzia≈Ça jak nale≈ºy');
    } else if (!rateLimitHit && !adminBlocked) {
      console.log('‚ö†Ô∏è RATE LIMITING MO≈ªE BYƒÜ WY≈ÅƒÑCZONY:');
      console.log('   ‚Ä¢ Ani zwykli u≈ºytkownicy, ani admini nie sƒÖ blokowani');
      console.log('   ‚Ä¢ Sprawd≈∫ konfiguracjƒô serwera');
    } else if (rateLimitHit && adminBlocked) {
      console.log('‚ùå PROBLEM Z KONFIGURACJƒÑ:');
      console.log('   ‚Ä¢ Rate limiting blokuje wszystkich, w≈ÇƒÖcznie z adminami');
      console.log('   ‚Ä¢ Sprawd≈∫ middleware rateLimiting.js');
    } else {
      console.log('ü§î NIEOCZEKIWANY WYNIK:');
      console.log('   ‚Ä¢ Tylko admini sƒÖ blokowani, zwykli u≈ºytkownicy nie');
      console.log('   ‚Ä¢ To nie powinno siƒô zdarzyƒá');
    }
    
  } catch (error) {
    console.error('‚ùå B≈ÇƒÖd podczas testowania:', error.message);
  }
}

// Uruchom test
testAdminRateLimiting();
